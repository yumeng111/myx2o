"""
Note: It is important to change the QSFP number, OH number, and date down when the scripts are being printed otherwise old data will be lost. The program will be updated soon to prevent the error from happening.
"""

import rpyc
import time
import sys
import numpy as np
import matplotlib.pyplot as plt
import datetime
import csv
import os.path

RPI_IP = "10.0.0.100"
RPI_PORT = 12333
X2O_IP = "10.0.0.11" # X2O v1
X2O_PORT = 12333
OPM_AVG_CNT = 5
OPM_NUM_ITERATIONS = 50
OPM_SLEEP = 0.0
SWITCH_OPM_PORT = 3
# this map had QSFP RX channels 3, 2, 0 connected to switch ports 0, 1, 2
# SWITCH_GE21_OH_PORTS = {"OH2_GBT0": 1, "OH3_GBT0": 2, "OH2_GBT1": 0}
# SWITCH_ME0_OH_PORTS = {"OH0_GBT0": 2, "OH0_GBT2": 1, "OH0_GBT3": 0}
# SWITCH_CSC_DMB_PORTS = {"DMB0": 2, "DMB2": 1, "DMB3": 0}
# ODMB_RX_MGT = {0: 89, 2: 93, 3: 95}
# this map expects QSFP RX channels 0, 2, 3 connected to switch ports 0, 1, 2  (I'm not sure if GE2/1 is correct in this case...)
SWITCH_GE21_OH_PORTS = {"OH2_GBT0": 1, "OH3_GBT0": 0, "OH2_GBT1": 2}
SWITCH_ME0_OH_PORTS = {"OH0_GBT0": 0, "OH0_GBT2": 1, "OH0_GBT3": 2}
#SWITCH_CSC_DMB_PORTS = {"DMB0": 0, "DMB2": 1, "DMB3": 2}
#ODMB_RX_MGT = {0: 89, 2: 93, 3: 95}
SWITCH_CSC_DMB_PORTS = {"DMB0": 0, "DMB1": 1, "DMB2": 2}
ODMB_RX_MGT = {0: 89, 1: 91, 2: 93}

# TX_SWITCH_GE21_OH_PORTS = {"OH3_GBT0": 0, "OH3_GBT1": 1, "OH2_GBT0": 2, "OH2_GBT1": 3}
TX_SWITCH_GE21_OH_PORTS = {"OH2_GBT0": 0, "OH2_GBT1": 1, "OH3_GBT0": 2, "OH3_GBT1": 3}
TX_SWITCH_ME0_OH_PORTS = {"OH0_GBT0": 0, "OH0_GBT1": 1, "OH0_GBT2": 2, "OH0_GBT3": 3}
TX_SWITCH_CSC_DMB_PORTS = {}

# the OH / GBT number on the X2O that is connected to the GBT which is sending the data back to the X2O receivers under test
GE21_TX_OH = 2
GE21_TX_GBT = 0

ME0_TX_OH = 0
ME0_TX_GBT = 0

# INITIAL_ATTENUATION = 6.0
# COARSE_ATT_STEP = 2.0
#INITIAL_ATTENUATION = 11.5 # Addon (?)
#INITIAL_ATTENUATION = 13.0 # ODMB7 to Vitex
# INITIAL_ATTENUATION = 12.0 # normal
INITIAL_ATTENUATION_ME0 = 12.0 # ME0 to Vitex
INITIAL_ATTENUATION_TX_ME0 = 16.0 # TX test to ME0
INITIAL_ATTENUATION_GE21 = 12.0 # GE21 to Vitex
INITIAL_ATTENUATION_TX_GE21 = 19.0 # TX test to GE21
INITIAL_ATTENUATION_ODMB7 = 13.0 # ODMB7 to Vitex
INITIAL_ATTENUATION_TX_ODMB7 = 16.0 # TX test to ODMB7
INITIAL_ATTENUATION_DTH = 12.0 # DTH
INITIAL_ATTENUATION_TX_DTH = 12.0 # DTH
INITIAL_ATTENUATION_DMB = 8.5 #12.0 # 17.0 # DTH
#INITIAL_ATTENUATION = 14.0
COARSE_ATT_STEP = 0.5
#FINE_ATT_STEP = 0.25
FINE_ATT_STEP = 0.5

MAX_ERRORS_ALLOWED = 0
GO_TO_ZERO_AFTER_SWITCH = True

DATA_ROOT_DIR = "/home/evka/qsfp_test"
RESULTS_SUMMARY_FILE = DATA_ROOT_DIR + "/results_summary.csv"

source = {
    'QSFP': 'qsfp',
    'VTRX': 'vtrx',
    'VTRX_Plus': 'vtrx_plus',
    'DMB': 'dmb'
} #The keys are the inputs in the command line, the values are used in the function to determine which transmitter will be tested

# returns power meter, switch, VOA, and X2O rw_reg
def configure():
    print("Connecting to RPi")
    conn_rpi = rpyc.classic.connect(RPI_IP, port=RPI_PORT)
    conn_rpi._config['sync_request_timeout'] = None
    print("Configuring the optical power meter")
    power_meter = conn_rpi.modules["measure_power"]
    try:
        power_meter.configure(avg_count=OPM_AVG_CNT) # configures power meter, avg_count is number of readings in 1 average(1 measurement)
    except:
        power_meter.disconnect()
        power_meter.configure(avg_count=OPM_AVG_CNT)
    print("Configuring the optical switch")
    switch = conn_rpi.modules["optical_switch"]
    switch.configure()
    print("Configuring the variable optical attenuator")
    voa = conn_rpi.modules["voa"]
    voa.configure()
    # voa.reset()

    print("Connecting to X2O")
    conn_x2o = rpyc.classic.connect(X2O_IP, port=X2O_PORT)
    conn_x2o._config['sync_request_timeout'] = None
    print("Setting up X2O register access")
    rw = conn_x2o.modules["common.rw_reg"]
    rw.parse_xml()
    x2o_utils = conn_x2o.modules["common.utils"]
    x2o_gbt = conn_x2o.modules["gem.gbt"]
    x2o_fw_utils = conn_x2o.modules["common.fw_utils"]
    x2o_prbs = conn_x2o.modules["common.prbs"]
    x2o_optics = conn_x2o.modules["boards.x2o.optics"]

    return power_meter, switch, voa, rw, x2o_utils, x2o_gbt, x2o_fw_utils, x2o_prbs, x2o_optics


def measure_power(opm):
    opm.multi_measure(iterations=OPM_NUM_ITERATIONS, sleep=OPM_SLEEP, units="dBm")
    res = float(opm.median())
    return res

def scatter_plot(x, y, name, title, x_label, y_label, series_label, fig, ax, color="b", marker="o"):
    # plt.xlabel(x_label)
    # plt.xlabel(y_label)
    ax.set_title(title)
    ax.scatter(x, y, c=color, marker=marker, label=series_label)
    # fig.savefig(DATA_ROOT_DIR + '/%s.png' % name)

# x_series is an array of X value arrays
# y_series is an array of Y value arrays
# titles is an array of titles for each of the series
# colors is an array of colors for each of the series
def scatter_plot_multiseries(x_series, y_series, titles, colors):
    pass
    # fig = plt.figure()
    # ax1 = fig.add_subplot(111)
    #
    # for ser in range(len(x_series)):
    #
    # ax1.scatter(x[:4], y[:4], s=10, c='b', marker="s", label='first')
    # ax1.scatter(x[40:], y[40:], s=10, c='r', marker="o", label='second')
    # plt.legend(loc='upper left');
    # plt.show()

def gbtx_write_reg(global_gbt_idx, addr, value):
    fw_date = rw.read_reg("BEFE.SYSTEM.RELEASE.DATE")
    fw_year = fw_date & 0xffff
    if fw_year < 0x2023:
        rw.write_reg("BEFE.GEM.SLOW_CONTROL.IC.GBTX_LINK_SELECT", global_gbt_idx)
    else:
        rw.write_reg("BEFE.GEM.SLOW_CONTROL.IC.GBT_LINK_SELECT", global_gbt_idx)
    rw.write_reg("BEFE.GEM.SLOW_CONTROL.IC.ADDRESS", addr)
    rw.write_reg("BEFE.GEM.SLOW_CONTROL.IC.WRITE_DATA", value)
    rw.write_reg("BEFE.GEM.SLOW_CONTROL.IC.EXECUTE_WRITE", 1)

def gbt_config_loopback(oh, gbt):
    station = rw.read_reg("BEFE.GEM.GEM_SYSTEM.RELEASE.GEM_STATION")
    if station == 2:
        global_gbt_idx = oh * 2 + gbt
        gbtx_write_reg(global_gbt_idx, 29, 0x17)
        gbtx_write_reg(global_gbt_idx, 30, 0x17)
        gbtx_write_reg(global_gbt_idx, 31, 0x17)
    elif station == 0:
        x2o_gbt.initGbtRegAddrs()
        x2o_gbt.selectGbt(oh, gbt)
        gbt_version = x2o_utils.get_config("CONFIG_ME0_GBT_VER")[oh][gbt]
        if gbt_version == 0:
            x2o_gbt.writeGbtRegAddrs(0x119, 0x36) # enable loopback on groups 0 and 1
            x2o_gbt.writeGbtRegAddrs(0x11a, 0x36)  # enable loopback on groups 2 and 3
            x2o_gbt.writeGbtRegAddrs(0x11b, 0x36)  # enable loopback on groups 4 and 5
            x2o_gbt.writeGbtRegAddrs(0x11c, 0x06)  # enable loopback on group 6
        elif gbt_version == 1:
            x2o_gbt.writeGbtRegAddrs(0x129, 0x36)  # enable loopback on groups 0 and 1
            x2o_gbt.writeGbtRegAddrs(0x12a, 0x36)  # enable loopback on groups 2 and 3
            x2o_gbt.writeGbtRegAddrs(0x12b, 0x36)  # enable loopback on groups 4 and 5
            x2o_gbt.writeGbtRegAddrs(0x12c, 0x06)  # enable loopback on group 6
        else:
            print("Unknown LpGBT version %d (should be 0 or 1" % gbt_version)
            sys.exit()
    else:
        print("ERROR: unsupported GEM station = %d" % station)
        # sys.exit()

def gbt_config_prbs(oh, gbt):
    gbt_config_loopback(oh, gbt)
    rw.write_reg("BEFE.GEM.GEM_SYSTEM.CTRL.GBT_PRBS_TX_EN", 1)

def odmb_config_prbs():
    links = x2o_fw_utils.befe_get_all_links()
    x2o_prbs.prbs_control(links, 5) # turn on PRBS31 mode on all links

def read_link_errors_gem(oh, gbt, err_measure_time):
    time.sleep(5)
    rw.write_reg("BEFE.GEM.GEM_SYSTEM.CTRL.LINK_RESET", 1)
    starting_time = time.time()
    while time.time() < starting_time + err_measure_time:
        time.sleep(1)
        gbt_ready = int(rw.read_reg("BEFE.GEM.OH_LINKS.OH%d.GBT%d_READY" % (oh, gbt)))
        fec_err = int(rw.read_reg("BEFE.GEM.OH_LINKS.OH%d.GBT%d_FEC_ERR_CNT" % (oh, gbt)))
        prbs_err = int(rw.read_reg("BEFE.GEM.OH_LINKS.OH%d.GBT%d_PRBS_ERR_CNT" % (oh, gbt)))
        if gbt_ready != 1:
            fec_err = 2**16 - 1
            prbs_err = 2**16 - 1
        if prbs_err > MAX_ERRORS_ALLOWED:
            break

    # rw.write_reg("BEFE.GEM.GEM_SYSTEM.CTRL.LINK_RESET", 1)
    # time.sleep(err_measure_time)
    # gbt_ready = int(rw.read_reg("BEFE.GEM.OH_LINKS.OH%d.GBT%d_READY" % (oh, gbt)))
    # fec_err = int(rw.read_reg("BEFE.GEM.OH_LINKS.OH%d.GBT%d_FEC_ERR_CNT" % (oh, gbt)))
    # prbs_err = int(rw.read_reg("BEFE.GEM.OH_LINKS.OH%d.GBT%d_PRBS_ERR_CNT" % (oh, gbt)))
    # if gbt_ready != 1:
    #     fec_err = 2**16 - 1
    #     prbs_err = 2**16 - 1

    return fec_err, prbs_err

def read_link_errors_csc(dmb, err_measure_time):
    if is_odmb:
        rx_mgt = ODMB_RX_MGT[dmb]

        links = x2o_fw_utils.befe_get_all_links()
        x2o_prbs.prbs_control(links, 0) # normal mode on all links
        x2o_prbs.prbs_control(links, 5) # turn on PRBS31 mode on all links

        time.sleep(5)
        rw.write_reg("BEFE.MGTS.MGT%d.CTRL.RX_PRBS_CNT_RESET" % rx_mgt, 1)
        # time.sleep(err_measure_time)
        starting_time = time.time()
        while time.time() < starting_time + err_measure_time:
            time.sleep(1)
            prbs_err = rw.read_reg("BEFE.MGTS.MGT%d.STATUS.PRBS_ERROR_CNT" % rx_mgt)
            if prbs_err > MAX_ERRORS_ALLOWED:
                break

        return prbs_err, prbs_err

    else:
        dmb_link = rw.read_reg("BEFE.CSC_FED.CSC_SYSTEM.RELEASE.DMB_LINK_CONFIG.DMB%d.RX0_LINK" % dmb)
        dmb_mgt = rw.read_reg("BEFE.SYSTEM.LINK_CONFIG.LINK%d.RX_MGT_IDX" % dmb_link)
        rw.write_reg("BEFE.MGTS.MGT%d.CTRL.RX_RESET" % dmb_mgt, 1)
        time.sleep(5)
        rw.write_reg("BEFE.CSC_FED.TEST.DMB_PRBS_TEST.ENABLE", 0)
        rw.write_reg("BEFE.CSC_FED.TEST.DMB_PRBS_TEST.LINK_SELECT", dmb)
        rw.write_reg("BEFE.CSC_FED.TEST.DMB_PRBS_TEST.ENABLE", 1)
        rw.write_reg("BEFE.CSC_FED.LINKS.CTRL.CNT_RESET", 1)
        time.sleep(err_measure_time)
        not_in_table_err = int(rw.read_reg("BEFE.CSC_FED.LINKS.DMB%d.NOT_IN_TABLE_CNT" % dmb))
        prbs_err = int(rw.read_reg("BEFE.CSC_FED.TEST.DMB_PRBS_TEST.PRBS_ERR_CNT"))
    #    if not_in_table_err > prbs_err:
    #        prbs_err = not_in_table_err

        return prbs_err, not_in_table_err

def save_data(qsfp_id, source_id, oh_gbt, timestamp, att_values, power_values, fec_err_values, prbs_err_values, temperature_values, num_bits, num_bits_str, options):
    
    with open(DATA_ROOT_DIR + '/full_measurement_data/%s_source_%s_ch_%s_bits_%s_time_%s.csv' % (qsfp_id, source_id, oh_gbt, num_bits_str.replace("**", "^"), timestamp), 'w') as csvfile:
        csvwriter = csv.writer(csvfile)
        header = ["power", "fec_err_cnt", "prbs_err_cnt", "temperature"]
        csvwriter.writerow(header)
        for i in range(len(power_values)):
            csvwriter.writerow([power_values[i], fec_err_values[i], prbs_err_values[i], temperature_values[i]])

    # create a summary file and write the header
    if not os.path.isfile(RESULTS_SUMMARY_FILE):
        with open(RESULTS_SUMMARY_FILE, 'w') as csvfile:
            csvwriter = csv.writer(csvfile)
            header = ["timestamp", "qsfp_id", "channel", "source_id", "num_bits", "num_bits_str", "sensitivity_pre_fec", "sensitivity_post_fec", "temp_at_pre_fec_sens", "temp_at_post_fec_sens", "options"]
            csvwriter.writerow(header)
        
    # find the pre-fec and post-fec sensitivityH%d.GBT%d_PRBS_ERR_CNT
    pre_fec_sens = 0
    post_fec_sens = 0
    pre_fec_temp = 0
    post_fec_temp = 0
    for i in range(len(power_values)):
        if fec_err_values[i] == 0 and power_values[i] < pre_fec_sens:
            pre_fec_sens = power_values[i]
            pre_fec_temp = temperature_values[i]
        if prbs_err_values[i] == 0 and power_values[i] < post_fec_sens:
            post_fec_sens = power_values[i]
            post_fec_temp = temperature_values[i]
    
    with open(RESULTS_SUMMARY_FILE, 'a') as csvfile:
        csvwriter = csv.writer(csvfile)
        row = [timestamp, qsfp_id, oh_gbt, source_id, num_bits, num_bits_str, pre_fec_sens, post_fec_sens, pre_fec_temp, post_fec_temp, options]
        csvwriter.writerow(row)
    
    
    #np.savetxt(DATA_ROOT_DIR + '/power_data/qsfp_%s_source_%s_%s_power_%s.csv' % (qsfp_id, source_id, oh_gbt, timestamp), power_values)
    #np.savetxt(DATA_ROOT_DIR + '/error_data/qsfp_%s_source_%s_%s_fec_error_%s.csv' % (qsfp_id, source_id, oh_gbt, timestamp), fec_err_values)
    #np.savetxt(DATA_ROOT_DIR + '/error_data/qsfp_%s_source_%s_%s_prbs_error_%s.csv' % (qsfp_id, source_id, oh_gbt, timestamp), prbs_err_values)
    
    #fig, (ax1, ax2) = plt.subplots(2)
    #scatter_plot(att_values, power_values, "att_vs_power", "Measured power vs attenuation (dBm)", "Attenuation (dBm)", "Measured power (dBm)", "measured power", fig, ax1)
    #scatter_plot(power_values, fec_err_values, "power_fec_err", "Error count vs measured power (dBm), " + "{:.1e}".format(num_bits), "Measured power (dBm)", "FEC correction count", "pre-FEC errors", fig, ax2, color="b", marker="o")
    #scatter_plot(power_values, prbs_err_values, "power_fec_err", "Error count vs measured power (dBm), " + "{:.1e}".format(num_bits), "Measured power (dBm)", "FEC correction count", "post-FEC errors", fig, ax2, color="r", marker="o")
    #plt.legend(loc='upper right');
#    fig.savefig('~/evka/plot_data/%d_source_%d_test_%d_test_time_%d' %(source, test_type, test_time, datetime.datetime))
    #fig.savefig(DATA_ROOT_DIR + '/plot_data/qsfp_%s_source_%s_%s_%s.png' % (qsfp_id, source_id, oh_gbt, timestamp))
    #plt.show()

def attenuate_and_measure(att, switch_oh_port, sleep_after_switch=1.0, use_power_meter=True, power_at_zero_att=None):
    power = 0.0
    if use_power_meter:
        voa.attenuate(att)
        switch.output_select(SWITCH_OPM_PORT)
        power = measure_power(opm)
        switch.output_select(switch_oh_port)
        time.sleep(sleep_after_switch)
        if GO_TO_ZERO_AFTER_SWITCH:
            voa.attenuate(0)
            voa.attenuate(att)
    else:
        if GO_TO_ZERO_AFTER_SWITCH:
            voa.attenuate(0)
        voa.attenuate(att)
        power = power_at_zero_att - att
    if is_gem:
        fec_err, prbs_err = read_link_errors_gem(oh, gbt, err_measure_time)
        print("Attenuation: %.2f, power: %.2f, FEC correction count: %d, PRBS error count: %d" % (att, power, fec_err, prbs_err))
    else:
        prbs_err, not_in_table = read_link_errors_csc(dmb, err_measure_time)
        print("Attenuation: %.2f, power: %.2f, PRBS error count: %d, not in table error count: %d" % (att, power, prbs_err, not_in_table))
        if not_in_table > prbs_err:
            prbs_err = not_in_table
        fec_err = prbs_err
    return power, fec_err, prbs_err

def gbt_locked(oh, gbt):
    return rw.read_reg("BEFE.GEM.OH_LINKS.OH%d.GBT%d_READY" % (oh, gbt))

# use_power_meter -- if this is True, then after each increase in attenuation the switch will switch to the output connected to the power meter and measure the power, if this is False, then the power is measured only at the beginning at 0 attenuation, and it's just estimated later on by adding attenuation to the initial level
# initial_power -- if None is supplied, the initial power at 0 attenuation will be measured, but if it is supplied, then it won't be measured
def scan_att(find_edge=False, use_power_meter=True, initial_power=None):
    print("=========== Attenuation scan ===========")
    print("")

    if initial_power is None:
        print("Setting initial attenuation zero")
        voa.attenuate(0)
        switch.output_select(SWITCH_OPM_PORT)
        time.sleep(1.5)
        power_at_zero_att = measure_power(opm)
        print("Power at zero attenuation: %.2f dBm" % power_at_zero_att)
    else:
        power_at_zero_att = initial_power
        print("Power at zero attenuation is supplied by the user: %.2f dBm" % initial_power)
    switch.output_select(switch_oh_port)
    time.sleep(1)

    print("Setting attenuation to 0 to configure the frontend")
    voa.attenuate(0)
    time.sleep(1.5)
    if is_gem:
        locked = gbt_locked(oh, gbt)
        if locked == 0:
            print("ERROR: GBT is not locked even at 0 attenuation. Exiting..")
            sys.exit()

    # disable GBT header pattern search in order not to shift the MGT data when it unlocks due to switching to the OPM for measurement
    # rw.write_reg("BEFE.GEM.GEM_SYSTEM.CTRL.GBT_FORCE_HEADER_LOCK", 1)

    if is_gem:
        print("Configuring GBT for PRBS31 loopback")
        gbt_config_prbs(tx_oh, tx_gbt)
    elif is_odmb:
        print("Configuring X2O links for PRBS31 testing with ODMB")
        odmb_config_prbs()

    print("Setting initial attenuation to %ddB" % INITIAL_ATTENUATION)
    init_att = INITIAL_ATTENUATION
    voa.attenuate(init_att)
    time.sleep(1.5)

    print("Switch port: %d" % switch_oh_port)
    print("Starting the test")
    print("")

    att = init_att
    att_values = []
    power_values = []
    fec_err_values = []
    prbs_err_values = []
    temperature_values = []
    first_bad_att = None
    for i in range(40):
        power, fec_err, prbs_err = attenuate_and_measure(att, switch_oh_port, sleep_after_switch=1.0, use_power_meter=use_power_meter, power_at_zero_att=power_at_zero_att)
        fec_err_values.append(fec_err)
        prbs_err_values.append(prbs_err)
        att_values.append(att)
        power_values.append(power)
        temperature_values.append(qsfp.temperature())

        if prbs_err > MAX_ERRORS_ALLOWED and first_bad_att is None:
           first_bad_att = att
           break

        # if prbs_err >= 2**16 - 1 and first_bad_att is None:
        #    first_bad_att = att
        #    break
        # if first_bad_att is not None and att - first_bad_att >= 1.0:
        #     break

        att += COARSE_ATT_STEP

    att = att - FINE_ATT_STEP

    first_good_att = None
    for i in range(40):
        power, fec_err, prbs_err = attenuate_and_measure(att, switch_oh_port, sleep_after_switch=1.0, use_power_meter=use_power_meter, power_at_zero_att=power_at_zero_att)
        fec_err_values.append(fec_err)
        prbs_err_values.append(prbs_err)
        att_values.append(att)
        power_values.append(power)
        temperature_values.append(qsfp.temperature())

        if ((fec_err == 0 and not is_tx_test) or (prbs_err == 0 and is_tx_test)) and first_good_att is None:
            first_good_att = att
            break
#        if first_good_att is not None and first_good_att - att >= FINE_ATT_STEP * 2:
#            break

        att -= FINE_ATT_STEP

    if find_edge:
        print("Finding the edge of failure and leaving the attenuator there")
        for i in range(40):
            power, fec_err, prbs_err = attenuate_and_measure(att, switch_oh_port, sleep_after_switch=1.0, use_power_meter=use_power_meter, power_at_zero_att=power_at_zero_att)
            fec_err_values.append(fec_err)
            prbs_err_values.append(prbs_err)
            att_values.append(att)
            power_values.append(power)
            temperature_values.append(qsfp.temperature())

            if fec_err > 0:
                break

            att += 0.05

    options = ""
    if is_tx_test:
        options += "tx_test"
    else:
        if find_edge:
            options += "find_edge "
        if not use_power_meter:
            options += "no_switching "

    # rw.write_reg("BEFE.GEM.GEM_SYSTEM.CTRL.GBT_FORCE_HEADER_LOCK", 0)
    print("QSFP temperature: %.2fC" % qsfp.temperature())
    save_data(qsfp_id, source_id, oh_gbt, timestamp, att_values, power_values, fec_err_values, prbs_err_values, temperature_values, num_bits, num_bits_str, options)

def lpgbt_config_line_driver(mod_curr, emphasis_en, emphasis_short, emphasis_curr):
    if mod_curr > 85:
        print("ERROR: modulation current setting above ~85 may damage VTRX+")
        sys.exit()

    reg39_val = (emphasis_en << 7) | mod_curr
    x2o_gbt.writeGbtRegAddrs(0x39, reg39_val)
    reg3a_val = (emphasis_short << 7) | emphasis_curr
    x2o_gbt.writeGbtRegAddrs(0x3a, reg3a_val)


def scan_lpgbt_mod_curr(min_lock_att, att, mod_curr_min=28, mod_curr_max=75, mod_curr_step=1, emphasis_curr_min=0, emphasis_curr_max=55, emphasis_curr_step=1):
    print("Setting default LpGBT line driver settings")
    lpgbt_config_line_driver(32, 0, 0, 0)

    print("Setting attenuation to %ddB" % att)
    voa.attenuate(att)
    time.sleep(1.5)

    print("Configuring GBT for PRBS31 loopback")
    gbt_config_prbs(tx_oh, tx_gbt)

    switch.output_select(SWITCH_OPM_PORT)
    power = measure_power(opm)
    print("Measured power = %.2fdBm" % power)

    # print("Setting attenuation to 0dBm to allow GBT to lock, and then disable the header pattern search")
    # voa.attenuate(0)
    # time.sleep(1.5)
    switch.output_select(switch_oh_port)
    time.sleep(1.5)
    # locked = gbt_locked(oh, gbt)
    # if locked == 0:
    #     print("ERROR: GBT is not locked even at the initial attenuation level. Exiting..")
    #     sys.exit()
    # # disable GBT header pattern search in order not to shift the MGT data when it unlocks due to switching to the OPM for measurement
    # rw.write_reg("BEFE.GEM.GEM_SYSTEM.CTRL.GBT_FORCE_HEADER_LOCK", 1)
    # print("Setting attenuation to %ddB" % att)
    # voa.attenuate(att)
    # time.sleep(1.5)

    for curr in range(mod_curr_min, mod_curr_max, mod_curr_step):
        max_emph_curr = 85 - curr
        if max_emph_curr > curr - 10:
            max_emph_curr > curr - 10
        if max_emph_curr > emphasis_curr_max:
            max_emph_curr = emphasis_curr_max
        for emph_curr in range(emphasis_curr_min, max_emph_curr, emphasis_curr_step):
            emph_en = 1 if emph_curr > 0 else 0
            emph_short_range = 2 if emph_en == 1 else 1
            for emph_short in range(emph_short_range):
                lpgbt_config_line_driver(curr, emph_en, emph_short, emph_curr)
                curr_ma = float(curr) * 0.137
                emph_curr_ma = float(emph_curr) * 0.137

                locked = gbt_locked(oh, gbt)
                if locked == 0:
                    voa.attenuate(min_lock_att)
                    time.sleep(1.5)
                    locked = gbt_locked(oh, gbt)
                    if locked == 0:
                        print("ERROR: GBT is not locking even at %ddBm, exiting.." % min_lock_att)
                        sys.exit()
                    voa.attenuate(att)
                    time.sleep(1.5)
                    locked = gbt_locked(oh, gbt)

                fec_err, prbs_err = read_link_errors_gem(oh, gbt, err_measure_time)
                print("Modulation current %d (%.2fmA / %dmV), emphasis short %d, emphasis current %d (%.2fmA / %dmV) -- locked: %d, fec_err: %d, prbs_err: %d" % (curr, curr_ma, curr_ma * 100, emph_short, emph_curr, emph_curr_ma, emph_curr_ma * 100, locked, fec_err, prbs_err))

    rw.write_reg("BEFE.GEM.GEM_SYSTEM.CTRL.GBT_FORCE_HEADER_LOCK", 0)


if __name__ == '__main__':
    if len(sys.argv) < 7:
        print("Usage: measure_sensitivity.py <COMMAND> <QSFP_CAGE_NUM> <SOURCE_ID> <OH> <GBT> <NUM_BITS> [command dependent args]")
        print("COMMAND:")
        print("     scan-att [no-switching]: scans through various attennuation levels and prints / plots the pre-FEC and post-FEC errors")
        print("     scan-att-find-edge [no-switching]: same as above, but at the end it uses very fine attenuation steps to dial in to the spot where errors are starting")
        print("     scan-att-tx <initial_tx_power_dbm> <TX_OH> <TX_GBT>: in this mode the script expects that 4 QSFP TX channels are connected to the optical switch inputs, and the output goes to the frontend through attenuator, the QSFP RX stays constant on OH0 GBT0. Note that in this mode the power cannot be measured automatically, and has to be supplied as an extra argument")
        print("     scan-lpgbt-mod-curr <att> <mod_curr_step> <emphasis_curr_step>: sets attenuation to the specified level, and then scans through lpgbt line driver modulation current")
        print("NUM_BITS: number of bits to test for errors, this can be an expression e.g. 3*10**12")
        sys.exit()

    command = sys.argv[1]
    qsfp_cage = int(sys.argv[2])
    source_id = sys.argv[3]
    oh = int(sys.argv[4])
    gbt = int(sys.argv[5])
    num_bits = eval(sys.argv[6])
    num_bits_str = sys.argv[6]
    bitrate = 0
    is_odmb = False
    if "VTRX+" in source_id or "ME0" in source_id:
        if "tx" not in command:
            bitrate = 10.24 * 10**9
            INITIAL_ATTENUATION = INITIAL_ATTENUATION_ME0
        else:
            bitrate = 2.56 * 10**9
            INITIAL_ATTENUATION = INITIAL_ATTENUATION_TX_ME0
    elif "VTRX" in source_id or "GE21" in source_id:
        bitrate = 4.8 * 10**9
        if "tx" not in command:
            INITIAL_ATTENUATION = INITIAL_ATTENUATION_GE21
        else:
            INITIAL_ATTENUATION = INITIAL_ATTENUATION_TX_GE21
    elif "ODMB" in source_id:
        if "tx" not in command:
            bitrate = 12.5 * 10**9
            INITIAL_ATTENUATION = INITIAL_ATTENUATION_ODMB7
        else:
            bitrate = 4.8 * 10**9
            INITIAL_ATTENUATION = INITIAL_ATTENUATION_TX_ODMB7
        is_odmb = True
    elif "DTH" in source_id:
        bitrate = 25.78125 * 10**9
        is_odmb = True
        if "tx" not in command:
            INITIAL_ATTENUATION = INITIAL_ATTENUATION_DTH
        else:
            INITIAL_ATTENUATION = INITIAL_ATTENUATION_TX_DTH
    elif "DMB" in source_id:
        bitrate = 1.28 * 10**9
        INITIAL_ATTENUATION = INITIAL_ATTENUATION_DMB
    else:
        print("ERROR: unknown source, cannot determine bitrate, see code for possible options")
        sys.exit()

    opm, switch, voa, rw, x2o_utils, x2o_gbt, x2o_fw_utils, x2o_prbs, x2o_optics = configure()
    
    qsfps = x2o_optics.x2o_get_qsfps()
    if qsfp_cage not in qsfps.keys():
        print("ERROR: qsfp cage %d cannot be accessed through I2C" % qsfp_cage)
        sys.exit()
    
    qsfp = qsfps[qsfp_cage]
    qsfp.select()
    qsfp_id = qsfp.vendor() + "_" + qsfp.serial_number()

    err_measure_time = num_bits / bitrate

    print("======= QSFP ID %s | source ID %s | OH %s | NUM_BITS %s (%d seconds) =======" % (qsfp_id, source_id, oh, "{:.1e}".format(num_bits), err_measure_time))

    is_gem = True if rw.read_reg("BEFE.SYSTEM.RELEASE.FW_FLAVOR") == 0 and "DTH" not in source_id else False # if testing DTH, just treat it as an ODMB test, because both of these are just PRBS
    if is_gem and "DMB" in source_id:
        print("ERROR: source ID indicates DMB, but the X2O is loaded with CSC firmware")
        sys.exit()
    if not is_gem and "DMB" not in source_id and "DTH" not in source_id:
        print("ERROR: source ID indicates a non-DMB source, but the X2O is loaded with CSC firmware")
        sys.exit()

    if is_gem:
        gem_station = rw.read_reg("BEFE.GEM.GEM_SYSTEM.RELEASE.GEM_STATION")
        tx_oh = GE21_TX_OH if gem_station == 2 else ME0_TX_OH if gem_station == 0 else None
        tx_gbt = GE21_TX_GBT if gem_station == 2 else ME0_TX_GBT if gem_station == 0 else None
        x2o_gbt.initGbtRegAddrs()
        x2o_gbt.selectGbt(tx_oh, tx_gbt)
        oh_gbt = "OH%d_GBT%d" % (oh, gbt)
    else:
        dmb = oh
        oh_gbt = "DMB%d" % dmb

    switch_oh_ports = SWITCH_CSC_DMB_PORTS if not is_gem else SWITCH_GE21_OH_PORTS if gem_station == 2 else SWITCH_ME0_OH_PORTS if gem_station == 0 else None
    if oh_gbt not in switch_oh_ports and "tx" not in command:
        print("ERROR: %s is not mapped to a switch port. Exiting." % oh_gbt)
        sys.exit()
    switch_oh_port = switch_oh_ports[oh_gbt]
    timestamp = time.strftime("%Y%m%d-%H%M%S")

    if "scan-att-tx" in command:
        is_tx_test = True
        use_power_meter = False
        if len(sys.argv) < 10:
            print("ERROR: missing parameters in TX mode: <initial_tx_power_dbm> <TX_OH> <TX_GBT>")
            sys.exit()
        tx_power = float(sys.argv[7])
        tx_oh = int(sys.argv[8])
        tx_gbt = int(sys.argv[9])
        if is_gem:
            x2o_gbt.selectGbt(tx_oh, tx_gbt)
            tx_oh_gbt = "OH%d_GBT%d" % (tx_oh, tx_gbt)
        else:
            tx_oh_gbt = "DMB%d" % tx_oh
        switch_oh_ports = TX_SWITCH_CSC_DMB_PORTS if not is_gem else TX_SWITCH_GE21_OH_PORTS if gem_station == 2 else TX_SWITCH_ME0_OH_PORTS if gem_station == 0 else None
        if tx_oh_gbt not in switch_oh_ports:
            print("ERROR: %s is not mapped to a switch port. Exiting." % tx_oh_gbt)
            sys.exit()
        switch_oh_port = switch_oh_ports[tx_oh_gbt]
        print("TX OH GBT = %s" % tx_oh_gbt)
        print("switch port = %d" % switch_oh_port)

        scan_att(find_edge=False, use_power_meter=False, initial_power=tx_power)

    elif "scan-att" in command:
        is_tx_test = False
        find_edge = "find-edge" in command
        use_power_meter = True
        if len(sys.argv) > 7:
            if "no-switching" in sys.argv[7]:
                use_power_meter = False
                print("WARNING: no-switching option was provided -- power is only measured at zero attenuation, and then it's just estimated for each point based on attenuation (this can be useful to avoid GBT unlocks in the backend)")

        scan_att(find_edge=find_edge, use_power_meter=use_power_meter)
    elif "scan-lpgbt-mod-curr" in command:
        if len(sys.argv) < 10:
            print("LpGBT modulation current scan needs two extra params: attenuation, and modulation current register value increment step, and emphasis current register value increment step")
            sys.exit()
        att = float(sys.argv[7])
        curr_step = int(sys.argv[8])
        emph_curr_step = int(sys.argv[9])
        # scan_lpgbt_mod_curr(6, att, mod_curr_min=45, mod_curr_max=76, mod_curr_step=curr_step, emphasis_curr_min=0, emphasis_curr_max=50, emphasis_curr_step=emph_curr_step)
        scan_lpgbt_mod_curr(6, att, mod_curr_min=55, mod_curr_max=76, mod_curr_step=curr_step, emphasis_curr_min=0, emphasis_curr_max=50, emphasis_curr_step=emph_curr_step)

    opm.disconnect()
